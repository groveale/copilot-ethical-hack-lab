{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>This site is to support the Copilot Ethical Hack as part of the CSU Chats and Hacks series.</p>"},{"location":"#references","title":"References","text":"<p>A lot of these steps were taken from - Copilot Developer Camp - Thanks!</p>"},{"location":"includes/b-path-links/","title":"B path links","text":"<ul> <li>Lab B0 - Prerequisites READY FOR TESTING</li> <li>Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit READY FOR TESTING</li> <li>Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent READY FOR TESTING</li> </ul>"},{"location":"includes/b-path-prelude/","title":"B path prelude","text":"<p>Table of Contents</p> <p></p>"},{"location":"includes/e-path-links/","title":"E path links","text":"<p>All labs are READY FOR TESTING</p> <ul> <li>Lab E0 - Prerequisites - Set up your development environment</li> <li>Lab E1 - Declarative Agent - Build a simple declarative copilot</li> </ul>"},{"location":"includes/e-path-prelude/","title":"E path prelude","text":"<p>Reminder</p> <p>To perform the following exercise, your developer tenant should be under private preview program and your account must have a valid license for Copilot for Microsoft 365 as well.</p> <p>Table of Contents</p> <p></p>"},{"location":"pages/custom-engine/","title":"Welcome to Copilot Developer Camp's Build Path: Build your own agent","text":"<p>During Build Path of the Copilot Developer Camp, you will develop a custom engine agent specifically designed to help Human Resources departments manage resumes, create new job posts and more.</p> <p>What is a custom engine agent?</p> <p>Custom engine agents are chatbots powered by Generative AI, designed to provide sophisticated conversational experiences. Custom engine agents are built using the Teams AI library, which provides comprehensive AI functionalities, including managing prompts, actions, and model integration as well as extensive options for UI customization. This ensures that your chatbots leverage the full range of AI capabilities while delivering a seamless and engaging experience aligned with Microsoft platforms.</p> <p>The journey starts with building a basic custom engine agent using Teams Toolkit, Teams AI library and Azure OpenAI. Then, you will implement Retrieval Augmented Generation (RAG) that provides ability to search across diverse resumes, apply UI enhancements to make the chatbot look and feel like a Copilot experience, finally you will enable authentication to secure your custom engine agent and use Microsoft Graph to incorporate Microsoft 365 data. This sophisticated custom engine agent will utilize custom AI models and an orchestrator to meet the unique needs of the Human Resources department.</p> Here are the labs <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit</li> <li>Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent</li> </ul>"},{"location":"pages/custom-engine/#start-here-with-lab-b0-where-youll-set-up-development-your-environment","title":"Start here with Lab B0, where you'll set up development your environment.","text":""},{"location":"pages/custom-engine/00-prerequisites/","title":"Lab B0 - Prerequisites","text":"<p>In this lab you will set up your development environment to build, test, and deploy the custom engine agent you will develop throughout the path.</p> Navigating the Build your own agent labs (Build Path) <ul> <li>Lab B0 - Prerequisites (\ud83d\udccd You are here)</li> <li>Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit</li> <li>Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent</li> </ul> <p>Table of Contents</p> <p></p> <p>In this lab you will learn how to:</p> <ul> <li>Install and configure Teams toolkit for Visual Studio Code</li> <li>Prepare your Azure environment to create required resources</li> </ul> <p>These samples and labs are intended for instructive and demonstration purposes and are not intended for use in production. Do not put them into production without upgrading them to production quality.</p> <p>To install and run your own custom engine agent, you'll need a Microsoft 365 tenant where you have administrator permission. You won't need Microsoft 365 Copilot License to test your custom engine agent.</p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-1-setup-microsoft-teams","title":"Exercise 1 : Setup Microsoft Teams","text":""},{"location":"pages/custom-engine/00-prerequisites/#step-1-enable-teams-custom-application-uploads","title":"Step 1: Enable Teams custom application uploads","text":"<p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit.</p> <p>1\ufe0f\u20e3 Navigate to https://admin.microsoft.com/, which is the Microsoft 365 Admin Center.</p> <p>2\ufe0f\u20e3 In the left panel of the admin center, select Show all to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center.</p> <p>3\ufe0f\u20e3 In the left of the Microsoft Teams admin center, open the Teams apps accordion. Select Setup Policies, you will see a list of App setup policies. Then, select the Global (Org-wide default) policy.</p> <p>4\ufe0f\u20e3 Ensure the first switch, Upload custom apps is turned On.</p> <p>5\ufe0f\u20e3 Be sure to scroll down and select the Save button to persist your change.</p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 20.x, the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on Teams Toolkit version 5.0. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click Install</p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-3-get-an-azure-subscription","title":"Exercise 3: Get an Azure subscription","text":"<p>To complete the exercises in Path B, you'll need an Azure subscription to create resources on Azure. If you don't have Azure subscription yet, you can activate an Azure free account that offers $200 in credits which can be used within the first 30 days on most Azure services.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-create-an-azure-free-account","title":"Step 1: Create an Azure free account","text":"<p>Follow the steps to activate an Azure free account:</p> <p>1\ufe0f\u20e3 Navigate to Azure free account page and select Activate.</p> <p>2\ufe0f\u20e3 Login with an account of your choice, it's recommended to use the Microsoft 365 tenant account you would like to use in the exercises.</p> <p>3\ufe0f\u20e3 Check the boxes for Privacy Statement, then select Next.</p> <p>4\ufe0f\u20e3 Provide a mobile phone number for identity verification step.</p> <p>5\ufe0f\u20e3 Provide payment details for a temporary authorization. You won\u2019t be charged unless you move to pay-as-you-go pricing. Then, select Sign up.</p> <p>Tip: Managing Azure resources after 30 days</p> <p>Azure free account will be available only for 30 days. Make sure you don't have any services running in your free subscription at the end of 30 days. If you want to continue using Azure services at the end of 30 days, you must upgrade to a pay-as-you-go subscription by removing the spending limit. This allows continued use of the Azure free account and select free services for the term.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab B0 - Prerequisites! You are now ready to proceed to lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit. Select Next. </p>"},{"location":"pages/custom-engine/01-custom-engine-agent/","title":"Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit","text":"<p>In this lab you will build a custom engine agent using Teams Toolkit for Visual Studio Code. You will also utilize Azure OpenAI models in your custom engine agent and define your first prompt.</p> Navigating the Build your own agent labs (Build Path) <ul> <li>Lab B0 - Prerequisites<ul> <li>Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit (\ud83d\udccd You are here)</li> <li>Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent</li> </ul> </li> </ul> <p>Table of Contents</p> <p></p> <p>In this lab you will:</p> <ul> <li>Learn what is a custom engine agent</li> <li>Create Azure OpenAI service and a deployment model</li> <li>Create a custom engine agent using Teams toolkit</li> <li>Define a prompt in your custom engine agent</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/01-custom-engine-agent/#introduction","title":"Introduction","text":"<p>Welcome aboard to the exciting journey of building your own custom engine agent! In this path, you'll create a custom engine agent for Microsoft Teams using cutting-edge Azure OpenAI models. You'll be able to define specific prompts, integrate complex data, and add advanced skills to make your agent truly unique. By using custom models and orchestration, your agent will tackle advanced tasks, complex conversations, and workflows, delivering an exceptional, personalized experience. Let's dive in and start building your first custom engine agent!</p> <p>Before everything else, lets remember... What is a custom engine agent?</p> <p>Custom engine agents are chatbots powered by Generative AI, designed to provide sophisticated conversational experiences. Custom engine agents are built using the Teams AI library, which provides comprehensive AI functionalities, including managing prompts, actions, and model integration as well as extensive options for UI customization. This ensures that your chatbots leverage the full range of AI capabilities while delivering a seamless and engaging experience aligned with Microsoft platforms.</p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#exercise-1-create-azure-openai-service-and-models","title":"Exercise 1: Create Azure OpenAI service and models","text":"<p>This exercise particularly demonstrates how to create and utilize Azure OpenAI's GPT models in custom engine agents. However, Custom engine agents are not limited to using GPT models only. You can also test the lab with any other model you prefer use.</p> Choosing Between Small and Large Language Models <p>When choosing between Small Language Models (SLMs) and Large Language Models (LLMs), as well as among various GPT models, it's important to consider the specific needs of your project in terms of complexity, computational resources, and efficiency.</p> <ul> <li> <p>LLMs: Best for complex and nuanced tasks requiring deep capabilities. They have billions of parameters and excel in understanding and generating human language. GPT-4, LLaMA 2, BERT or PaLM can be examples for LLMs.  Example scenarios: Handling intricate customer inquiries, offering detailed and context-aware responses, generating high-quality articles from brief prompts, summarizing large volumes of academic papers, extracting key insights, and answering detailed questions.</p> </li> <li> <p>SLMs: Better for quick tasks with limited resources where speed and efficiency are key. They have fewer parameters and are optimized for specific tasks with lower computational needs. Phi-3 by Microsoft, ALBERT by Google or DistilBERT by HuggingFace can be examples for SLMs.  Example scenarios: Providing efficient text analysis without needing cloud resources, enabling accurate and responsive voice commands with minimal latency, smart home automation and control with natural speech.</p> </li> </ul> <p>OpenAI's GPT models are popular examples for LLMs. When choosing between OpenAI's models you may consider the following benefits:</p> <ul> <li> <p>gpt-4: The most advanced model, suitable for highly complex tasks that require extensive understanding and generation capabilities.</p> </li> <li> <p>gpt-4o: An optimized version for specific tasks, offering faster and more efficient performance in those areas.</p> </li> <li> <p>gpt-35-turbo: A balanced model that provides good performance at a lower cost, ideal for a wide range of applications.</p> </li> </ul> <p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-1-create-azure-openai-service-resource","title":"Step 1: Create Azure OpenAI service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure OpenAI</code>. Select the Azure OpenAI service and then Create.</li> <li>Fill out the following details and select Next:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: The Azure resource group to contain your Azure OpenAI resource. You can create a new group or use a pre-existing group.</li> <li>Region: The location of your instance.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>MyOpenAIResource</code>.</li> <li>Pricing Tier: The pricing tier for the resource. Currently, only the <code>Standard</code> tier is available for the Azure OpenAI Service.</li> </ul> </li> <li>Select the network configuration of your choice and select Next.</li> <li>Leave the Tags section as default and select Next.</li> <li>Finally, review your Azure OpenAI service details and select Create.</li> </ol> <p>Once your Azure OpenAI service is created successfully, navigate to your resource, select Keys and Endpoint from the left side panel. Copy and save <code>KEY 1</code> and <code>Endpoint</code>that will be required later in Exercise 2.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-2-create-a-deployment-model","title":"Step 2: Create a deployment model","text":"<p>In your Azure OpenAI service, navigate to Model deployments from the left side panel, then select Manage deployments. This will direct you to <code>Azure OpenAI Studio</code> where you can create your deployment model.</p> What is Azure OpenAI Studio? <p>Azure OpenAI Studio is a playground to explore OpenAI models like <code>gpt-35-turbo</code>, <code>gpt-4</code> or <code>Dall-e</code> that helps you craft unique prompts for your use cases, and fine-tune your models. If you prefer to use any model other than OpenAI models such as <code>Phi-3</code>, <code>Llama 3.1</code> or models from <code>HuggingFace</code>, we recommend you to use Azure AI Studio that provide a large selection of models to deploy, fine-tune and publish.</p> <p>Learn more about the Generative AI, prompting and Azure OpenAI Studio by watching this Doodle to Code video!</p> <p></p> <p>From the Deployments tab, select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Deployment name: Recommended to use the same name with the selected deployment model, such as <code>gpt-35-turbo</code>.</li> <li>Select a model: Select <code>gpt-35-turbo</code> or higher model.</li> <li>Model version: Auto update to default.</li> <li>Deployment type: Provisioned-Managed.</li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p> <p>Once your model is successfully created, you can navigate to Chat, and test your model by selecting one of the available templates in Prompt section and asking relevant questions in the chat playground.</p> <p>For example, choose \"Shakespeare writing assistant\" and ask questions such as \"tell me about Istanbul\". You'll be amazed by the descriptive and poetic style of the response \u270d\ufe0f.</p> <p></p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#exercise-2-scaffold-a-custom-engine-agent-from-a-template","title":"Exercise 2: Scaffold a custom engine agent from a template","text":"<p>You'll need to complete all the required pre-requisites before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-1-use-teams-toolkit-to-create-a-new-custom-engine-agent","title":"Step 1: Use Teams Toolkit to create a new custom engine agent","text":"<ol> <li>Open Teams Toolkit on Visual Studio Code and select Create a New App &gt; Custom Engine Agent &gt; Basic AI Chatbot.</li> <li>Select TypeScript as a programming language choice and Azure OpenAI as Large Language model of your choice.<ol> <li>Paste the Azure OpenAI key and press enter.</li> <li>Paste the Azure OpenAI endpoint and press enter. (Endpoint shouldn't include forward slash at the end of its URL.)</li> <li>Type Azure OpenAI deployment model name and press enter.</li> </ol> </li> <li>Select a folder for your project root.</li> <li>Provide a name for your project such as <code>CareerGenie</code> and press enter.</li> </ol> <p>After providing all the details mentioned above, your project will be scaffolded successfully in seconds.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-2-customize-prompt-and-test-the-app","title":"Step 2: Customize prompt and test the app","text":"<p>Prompts are essential for interacting with AI language models and directing their behavior. They serve as the inputs or questions we provide to the model to obtain specific responses. By crafting prompts carefully, we can guide the AI to generate desired outputs. Let's customize the prompt of our custom engine agent and define the behavior of Career Genie!</p> <p>In your project folder, navigate to <code>src/prompts/chat/skprompt.txt</code> and replace the existing text with the following prompt:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team for writing job posts.\nYou are friendly and professional.\nYou always greet users with excitement and introduce yourself first.\nYou like using emojis where appropriate.\n</code></pre> <p>To test the behavior of your app quickly, you can use Teams App Test Tool. Later in the exercise, you'll run and debug your custom engine agent on Microsoft Teams.</p> More information about the Teams App Test Tool <p>The Teams App Test Tool, or simply Test Tool, is a feature within Teams Toolkit that enables developers to debug, test, and refine their Teams bot applications in a web-based chat environment that mimics the behavior, look, and feel of Microsoft Teams. This tool eliminates the need for a Microsoft 365 tenant or a dev tunnel, streamlining the development process.</p> <p>Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Test Tool. Teams App Test Tool will pop up on your browser and you can start chatting with your custom engine agent right away! Some of the recommended questions you can ask to test the behavior:</p> <ul> <li>\"Can you help me write a job post for a Senior Developer role?\"</li> <li>\"What would be the list of required skills for a Project Manager role?\"</li> <li>\"Can you share a job template?\"</li> </ul> <p></p> What does Teams Toolkit do behind the scene? <p>When you start debugging your app, Teams Toolkit completes some required tasks for you behind the scene, such as:</p> <ul> <li>Checking the required prerequisites such as Node.js, Microsoft 365 Account (If debugging in local or dev), ports occupancy.</li> <li>Starting local tunneling service (If debugging in local) to forward public URL to local port.</li> <li>Executing the lifecycle stage provision, available in <code>teamsapp.yml</code>, <code>teamsapp.local.user</code> or <code>teamsapp.testtool.user</code> files for creating Teams App ID, completing bot registration, executing the app manifest and creating the app package, available in <code>appPackage/</code> folder.</li> <li>Create or update variables to env file, available in <code>env/</code> folder.</li> </ul> <p>After successfully completing your testing, end your debugging session and close the terminals in Visual Studio Code.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit! If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>You are now ready to proceed to Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent. Select Next.</p>"},{"location":"pages/custom-engine/02-rag/","title":"Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent","text":"<p>In this lab you will enable Retrieval-Augmented Generation for your custom engine agent and integrate with Azure AI Search to chat with your data.</p> Navigating the Build your own agent labs (Build Path) <ul> <li>Lab B0 - Prerequisites</li> <li>Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit</li> <li>Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent (\ud83d\udccd You are here)</li> </ul> <p>---8&lt;--- \"b-path-prelude.md\" </p> <p>In this lab you will:</p> <ul> <li>Learn what is Retrieval-Augmented Generation (RAG)</li> <li>Setup Azure resources</li> <li>Upload your documents to Azure AI Search</li> <li>Prepare your custom engine agent for Vector Search</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/02-rag/#introduction","title":"Introduction","text":"<p>What is Retrieval-Augmented Generation (RAG)?</p> <p>Retrieval-Augmented Generation (RAG) is a technique used in artificial intelligence to improve the quality of responses generated by language models. Here's a simple example to understand it better:</p> <p>Imagine you have a smart assistant that can write answers to your questions. Sometimes, this assistant might not know everything it needs to give a great answer. To help with this, RAG lets the assistant look up information from a large collection of documents, videos, images similar to how you might search the internet for answers. After finding the relevant information, the assistant then uses this data to write a better, more accurate response.</p> <p>So, RAG combines two steps:</p> <ul> <li>Retrieval: Finding relevant information from a big pool of data.</li> <li>Generation: Using that information to create a detailed and accurate response.</li> </ul> <p>This way, RAG helps in providing more informed and useful answers, making it very effective for tasks like answering questions, writing articles, and assisting with research.</p> <p>Learn more about the RAG by watching this Doodle to Code video!</p> <p></p> <p>In the previous exercise, you learned how to create a custom engine agent and customize the prompt for defining the behavior of the AI chatbot, Career Genie. In this exercise, you'll apply vector search to a collection of resumes to find the best candidate for the job requirements. To enable vector search in Career Genie, you'll use the \"Azure OpenAI Studio on your data\" feature to:</p> <ul> <li>Create an index on Azure AI Search.</li> <li>Generate vector embeddings for the resumes (PDF documents).</li> <li>Upload the data in chunks to Azure AI Search.</li> </ul> <p>Finally, you'll integrate your custom engine agent with Azure AI Search to chat with your data and obtain the best results.</p> Benefits of using Vector Search <p>Vector search is an advanced technique used to find information quickly and accurately based on its meaning rather than just matching exact words. Unlike traditional text-based search, which relies on exact keyword matches, vector search uses numeric vectors to find content that is similar to your query. This enables Vector search to handle:</p> <ul> <li>Semantic or conceptual similarity: Matching concepts that are similar in meaning even if they use different words (e.g., \"pastry\" and \"croissant\").</li> <li>Multilingual content: Finding equivalent content across different languages (e.g., \"pastry\" in English and \"geb\u00e4ck\" in German).</li> <li>Multiple content types: Searching across different formats (e.g., \"pastry\" in text and an image of a pastry).</li> </ul> <p>Here is how vector search works:</p> <ol> <li>Converting text to vectors: Imagine turning words or sentences into a series of numbers (a vector) that captures the essence or meaning of that text. This is done using techniques like word embeddings or deep learning models.</li> <li>Storing vectors: These vectors are stored in a special database designed to handle them efficiently.</li> <li>Searching with vectors: When you search for something, your query is also converted into a vector. The search system then looks for vectors in the database that are close to your query vector in terms of meaning, not just exact word matches.</li> </ol> <p>For example, if you search for \"how to bake a cake\" the system can find documents about \"cake recipes\" or \"baking tips\" even if they don't have the exact words \"how to bake a cake\" or even if the recipes are written in another language. This makes vector search powerful for finding relevant information based on context and meaning, especially in large datasets.</p> <p>In summary, vector search improves the search process by focusing on the meaning behind the words, enabling more accurate and relevant results.</p>"},{"location":"pages/custom-engine/02-rag/#exercise-1-setup-azure-resources","title":"Exercise 1: Setup Azure Resources","text":"<p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-create-azure-ai-search-service-resource","title":"Step 1: Create Azure AI Search service resource","text":"What is Azure AI Search? <p>Azure AI Search (formerly known as \"Azure Cognitive Search\") provides secure information retrieval at scale over user-owned content in traditional and generative AI search applications.When you create a search service, you work with the following capabilities:</p> <ul> <li>A search engine for vector search, full text and hybrid search over a search index</li> <li>Rich indexing with integrated data chunking and vectorization</li> <li>Rich query syntax for vector queries, text search, hybrid queries</li> <li>Integration with Azure AI services and Azure OpenAI</li> </ul> <ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure AI Search</code>. Select the Azure AI Search service and then Create.</li> <li>Fill out the following details and select Review + Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcamp-ai-search</code>.</li> <li>Location: The location of your instance.</li> <li>Pricing Tier: Basic</li> </ul> </li> </ol> <p>Once your Azure AI Search service resource is created successfully, navigate to your resource, In Overview, copy and save <code>Url</code>. Then, navigate to Keys tab under the Settings, copy and save <code>Primary admin key</code>. Both of them will be required later in the following exercises.</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-2-create-a-storage-account-service-resource","title":"Step 2: Create a storage account service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Storage Account</code>. Select the Storage Account service and then Create.</li> <li>Fill out the following details and select Review, then Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcampstorage</code>.</li> <li>Region: The location of your instance.</li> <li>Performance: Standard</li> <li>Redundancy: Geo-redundant storage (GRS)</li> </ul> </li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-3-create-a-text-embedding-ada-002-model","title":"Step 3: Create a <code>text-embedding-ada-002</code> model","text":"What does <code>text-embedding-ada-002</code> do? <p>The <code>text-embedding-ada-002</code> model on Azure OpenAI converts text into numeric vectors that represent the meaning of the text. This allows for vector search, where instead of matching exact words, the search finds text with similar meanings. It works with multiple languages and different content types, making it useful for comparing text across languages and formats. When used with Azure AI Search, it improves search results by finding the most relevant and contextually accurate information. This model is perfect for creating advanced search solutions and applications that need to understand natural language.</p> <p>Open Azure OpenAI Studio in your browser, then select Deployments. Select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Select a model: <code>text-embedding-ada-002</code>.</li> <li>Model version: Default.</li> <li>Deployment type: Standard.</li> <li>Deployment name: Choose a memorable name, such as <code>text-embeddings</code></li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#exercise-2-upload-your-documents-to-azure-ai-search-using-azure-openai-studio","title":"Exercise 2: Upload your documents to Azure AI Search using Azure OpenAI Studio","text":"<p>For this exercise, download fictitious_resumes.zip and unzip the folder.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-upload-your-documents-to-azure-ai-search","title":"Step 1: Upload your documents to Azure AI Search","text":"<ol> <li> <p>Open Azure OpenAI Studio in your browser, then select Chat playground. In the Setup section, select Add your data tab and then Add a data source.</p> <p></p> </li> <li> <p>Select Upload files (preview), then fill the details as the following and select Next:</p> <ul> <li>Subscription: Select the subscription you created your Azure resources.</li> <li>Select Azure Blob storage resource: Select your storage resource, <code>copilotcampstorage</code>. (You'll see a message Azure OpenAI needs your permission to access this resource, select Turn on CORS.)</li> <li>Select Azure AI Search resource: Select your Azure AI Search resournce, <code>copilotcamp-ai-search</code>.</li> <li>Enter the index name: Index name, such as <code>resumes</code>; make note of this</li> <li>Select the box for Add vector search to this search resource.</li> <li>Select an embedding model: Select your text-embedding-ada-002 model, <code>text-embeddings</code>.</li> </ul> </li> </ol> <p>Take note of the index name as you will use this in the INDEX_NAME environment variable.</p> <p></p> <ol> <li>Select Browse for a file and select the pdf documents from the <code>resumes</code> folder. Then, select Upload files and Next.</li> <li>Select Search type as <code>Vector</code> and chunk size as <code>1024(Default)</code>, then Next.</li> <li>Select <code>API Key</code> as Azure resource authentication type, then Next.</li> </ol> <p>It takes couple of minutes to complete the data ingestion. Once the data is ready, you can proceed with testing.</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-2-test-your-data-on-azure-openai-studio","title":"Step 2: Test your data on Azure OpenAI Studio","text":"<p>Once your data  ingestion is completed, use Chat playground to ask questions about your data.</p> <p>Tip: Making the most out of your data</p> <p>Review your dataset before asking questions testing the vector search. Go through the <code>resumes</code> folder and recognize the resumes provided in different languages with diverse professions, years of experience, skills and more. Start chatting with your data by asking questions to find out the right candidate for a skill, language, profession, years of experience and other categories. Try to test out the combination of requirements to challenge the search experience!</p> <p></p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-3-sneak-peek-to-your-index-on-azure-ai-search","title":"Step 3: Sneak peek to your index on Azure AI Search","text":"<p>To understand more about your dataset and explore more, select resumes from the Add your data section of the Chat playground. This will redirect you to your resumes index on Azure AI Search.</p> <p></p> <p>First, let's include the vector content in our data. Select Fields tab in your Resumes index page, then check the box for contentVector, finally select Save.</p> <p></p> <p>Go back to Search explorer tab, select Query options in your Resumes index page and then change the API version as <code>2023-11-01</code>, then select Close. To view your data, press Search.</p> <p>When scrolling through your data, recognize that each document has <code>contentVector</code> parameter that contains the numeric vectors of the pdf document. These numeric vectors will be used for Vector Search to identify the best matching results.</p> <p></p> <p></p>"},{"location":"pages/custom-engine/02-rag/#exercise-3-integrate-your-app-with-azure-ai-search","title":"Exercise 3: Integrate your app with Azure AI Search","text":"<p>For this exercise, ensure that you obtain Azure OpenAI text embedding deployment name and Azure AI Search key and endpoint.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-configure-environment-variables","title":"Step 1: Configure environment variables","text":"<p>In your Career Genie project, navigate to <code>env/.env.local.user</code> and paste the following environment variables:</p> <pre><code>AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME='&lt;Your-Text-Embedding-Model-Name&gt;'\nSECRET_AZURE_SEARCH_KEY='&lt;Your-Azure-AI-Search-Key&gt;'\nAZURE_SEARCH_ENDPOINT='&lt;Your-Azure-AI-Search-Endpoint&gt;'\nINDEX_NAME='&lt;Your-index-name&gt;'\n</code></pre> <p>Open <code>teamsapp.local.yml</code> and add the following snippet at the bottom of the file, under <code>uses: file/createOrUpdateEnvironmentFile</code>:</p> <pre><code>AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME: ${{AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME}}\nAZURE_SEARCH_KEY: ${{SECRET_AZURE_SEARCH_KEY}}\nAZURE_SEARCH_ENDPOINT: ${{AZURE_SEARCH_ENDPOINT}}\nINDEX_NAME: ${{INDEX_NAME}}\n</code></pre> <p>Navigate to <code>src/config.ts</code> and add the following snippet inside <code>config</code>:</p> <pre><code>azureOpenAIEmbeddingDeploymentName: process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME,\nazureSearchKey: process.env.AZURE_SEARCH_KEY,\nazureSearchEndpoint: process.env.AZURE_SEARCH_ENDPOINT,\nindexName: process.env.INDEX_NAME,\n</code></pre> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-2-configure-azure-ai-search-as-a-data-source","title":"Step 2: Configure Azure AI Search as a data source","text":"<p>Open <code>src/prompts/chat/config.json</code> in your project, then add <code>data_sources</code> inside the <code>completion</code> brackets:</p> <pre><code>\"data_sources\": [\n{\n    \"type\": \"azure_search\",\n    \"parameters\": {\n        \"endpoint\": \"$searchEndpoint\",\n        \"index_name\": \"$indexName\",\n        \"authentication\": {\n            \"type\": \"api_key\",\n            \"key\": \"$searchApiKey\"\n        },\n        \"query_type\":\"vector\",\n        \"in_scope\": true,\n        \"strictness\": 3,\n        \"top_n_documents\": 3,\n        \"embedding_dependency\": {\n        \"type\": \"deployment_name\",\n        \"deployment_name\": \"$azureOpenAIEmbeddingDeploymentName\"\n        }\n    }\n}\n]\n</code></pre> <p>Open <code>src/prompts/chat/skprompt.txt</code> and update the prompt as the following:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team for finding the right candidate for the jobs. \nYou are friendly and professional.\nYou always greet users with excitement and introduce yourself first.\nYou like using emojis where appropriate.\nAlways mention all citations in your content.\n</code></pre> <p>Open the terminal in Visual Studio Code, and run the following script from the project root:</p> <pre><code>npm install fs\n</code></pre> <p>Go to <code>src/app/app.ts</code> and add the following parameter in your  <code>OpenAIModel</code>:</p> <pre><code>azureApiVersion: '2024-02-15-preview'\n</code></pre> <p>Add the following import on top of the <code>src/app/app.ts</code> file:</p> <pre><code>import fs from 'fs';\n</code></pre> <p>In <code>src/app/app.ts</code>, replace the <code>defaultPrompt</code> inside the <code>ActionPlanner</code> with the following code snippet:</p> <pre><code>defaultPrompt: async () =&gt; {\n    const template = await prompts.getPrompt('chat');\n    const skprompt = fs.readFileSync(path.join(__dirname, '..', 'prompts', 'chat', 'skprompt.txt'));\n\n    const dataSources = (template.config.completion as any)['data_sources'];\n\n    dataSources.forEach((dataSource: any) =&gt; {\n      if (dataSource.type === 'azure_search') {\n        dataSource.parameters.authentication.key = config.azureSearchKey;\n        dataSource.parameters.endpoint = config.azureSearchEndpoint;\n        dataSource.parameters.indexName = config.indexName;\n        dataSource.parameters.embedding_dependency.deployment_name =\n          config.azureOpenAIEmbeddingDeploymentName;\n        dataSource.parameters.role_information = `${skprompt.toString('utf-8')}`;\n      }\n    });\n\n    return template;\n}\n</code></pre> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-3-debug-your-app-and-chat-with-your-data","title":"Step 3: Debug your app and chat with your data","text":"<p>Let's test Career Genie on Teams this time. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>Ensure your questions are related to your dataset. Go through pdf documents in the <code>resumes</code> folder to understand more about your data. Challenge your custom engine agent by combining requirements and asking complex questions! Some suggestions would be:</p> <ul> <li>Can you suggest a candidate who is suitable for spanish speaking role that requires at least 2 years of .NET experience?</li> <li>Who are the other good candidates?</li> <li>Who would be suitable for a position that requires 5+ python development experience?</li> <li>Can you suggest any candidates for a senior developer position with 7+ year experience that requires Japanese speaking?</li> </ul> <p></p> <p></p>"},{"location":"pages/custom-engine/02-rag/#congratulations","title":"CONGRATULATIONS","text":"<p>You have completed Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent! If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>You are now ready to proceed to Lab B3 - Enhance User Experience with the Powered by AI kit! Select Next. </p>"},{"location":"pages/extend-m365-copilot/","title":"Welcome to Copilot Developer Camp's Extend Path: Extend Copilot for Microsoft 365","text":"<p>During Extend Path of the Copilot Developer Camp, learners will construct a customized assistant tailored for a Human Resource department. The process will begin with the creation of a basic declarative Copilot and progress towards developing fully skilled assistant. This advanced assistant will be equipped with security features, including authentication mechanism linked to the Microsoft 365 tenant to get organizational data.</p> Here are the labs <ul> <li>Lab E0 - Prerequisites - Set up your development environment</li> <li>Lab E1 - Declarative Agent - Build a simple declarative copilot</li> </ul>"},{"location":"pages/extend-m365-copilot/#start-here-with-lab-e0-where-youll-set-up-development-your-environment","title":"Start here with Lab E0, where you'll set up development your environment.","text":""},{"location":"pages/extend-m365-copilot/00-prerequisites/","title":"Lab E0 - Prerequisites","text":"<p>In this lab, you will set up the development environment to build, test, and deploy the Copilot agents, that will help you achieve tailor made AI assitance using Microsoft 365 Copilot. </p> Navigating the Extend Copilot labs (Extend Path) <ul> <li>Lab E0 - Prerequisites (\ud83d\udccdYou are here)</li> <li>Lab E1 - Declarative Agent</li> </ul> <p>Reminder</p> <p>To perform the following exercise, your developer tenant should be under private preview program and your account must have a valid license for Copilot for Microsoft 365 as well.</p> <p>Table of Contents</p> <p></p> <p>In this lab you will learn:</p> <ul> <li>How to set up your Microsoft 365 tenant to run the entire lab exercise for this path</li> <li>How to install and configure Teams toolkit for Visual Studio Code</li> </ul> <p>Disclaimer</p> <p>These samples and labs are intended for instructive and demonstration purposes and are not intended for use in production. Do not put them into production without upgrading them to production quality.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#exercise-1-configure-teams-upload-policy","title":"Exercise 1: Configure Teams upload policy","text":""},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-1-enable-teams-application-uploads","title":"Step 1: Enable Teams application uploads","text":"<p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit.</p> <ul> <li>Sign in to Microsoft Teams admin center with your admin credentials.</li> <li>Go to Teams apps &gt; Setup Policies &gt; Global.</li> <li>Toggle Upload custom apps to the \"On\" position.</li> <li>Select \"Save\". Your test tenant can permit custom app upload.</li> </ul> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p> <p></p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p> <p></p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>Node.js is a runtime that allows you to run JavaScript on your computer. It uses the open-source V8 engine, which is used in popular web browsers like Google Chrome (and the Chromium-based version of Microsoft Edge). You will need Node.js to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 20.x, the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version LTS.</p> If you need more than one version of NodeJS <p>Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 18.x and 20.x. If you already have another version of NodeJS installed, or want future flexibility to change Node versions, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p> <p></p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on the latest general available version of Teams Toolkit. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click \"Install\"</p> <p></p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p></p> <p>Now you are all set to create your first extensibility feature for Copilot for Microsoft 365. Proceed to create a Declarative Agent in the next lab. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/","title":"Lab E1 - Customize Copilot by building a declarative agent","text":"<p>In this lab, you'll build a simple declarative agent using Teams Toolkit for Visual Studio Code. Your agent is designed to give you a fun and educational break from work by helping you explore cities across the globe. It presents abstract clues for you to guess a city, with fewer points awarded the more clues you use. At the end, your final score will be revealed.</p> Navigating the Extend Copilot labs (Extend Path) <ul> <li>Lab E0 - Prerequisites</li> <li>Lab E1 - Declarative agent (\ud83d\udccdYou are here)</li> </ul> <p>Reminder</p> <p>To perform the following exercise, your developer tenant should be under private preview program and your account must have a valid license for Copilot for Microsoft 365 as well.</p> <p>Table of Contents</p> <p></p> <p>In this lab you will learn:</p> <ul> <li>What is a declarative agent for Microsoft 365 Copilot</li> <li>Install Teams toolkit for VS Code from this link</li> <li>Create a declarative agent using Teams Toolkit template</li> <li>Customise the agent to create the geo locator game using instructions </li> <li>Learn how to run and test your app </li> <li>For bonus exercise, you will need a SharePoint teams site</li> </ul>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#introduction","title":"Introduction","text":"<p>Declarative agents leverage the same scalable infrastructure and platform of Microsoft 365 Copilot, tailored specifically to meet focus on a special area of your needs. They function as subject matter experts in a specific area or business need, allowing you to use the same interface as a standard Microsoft 365 Copilot chat while ensuring they focus exclusively on the specific task at hand. </p> <p>Welcome on board to building your own declarative agent \u263a\ufe0f! Let's dive in and make your Copilot work magic!</p> <p>In this lab you will start out building a declarative agent using Teams Toolkit with a default template used in the tool. This is to help you get started with something. Next, you will modify your agent to be focused on a geo location game. </p> <p>The goal of your AI is to provide a fun break from work while helping you learn about different cities around the world. It offers abstract clues for you to identify a city. The more clues you need, the fewer points you earn. At the end of the game, it will reveal your final score.</p> <p></p> <p>As a bonus you will also give your agent some files to refer to a secret diary \ud83d\udd75\ud83c\udffd and a map \ud83d\uddfa\ufe0f to give more challenges to the player. </p> <p>So let's begin \ud83d\udcaa\ud83c\udffc</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#anatomy-of-a-declarative-agent","title":"Anatomy of a Declarative agent","text":"<p>You will see as we develop more and more extensions to Copilot,  that in the end what you will build is collection of few files in a zip file which we will refer to as an <code>app package</code> that you will  then install and use. So it's important you have a basic understanding of what the app package consists of. The app package of a declarative agent is similar to a Teams app if you have built one before with additonal elements. See the table to see all the core elements. You will also see that the app deployment process is very similar to deploying a teams app. </p> Element Description Name of file App manifest Describes app configuration, capabilities, required resources, and important attributes. manifest.json App icons Requires a color (192x192) and outline (32x32) icon for your declarative agent. icon.png, color.png Declarative agent manifest Describes agent configuration, instructions, required fields, capabilities, conversation starters, and actions. declarativeAgent.json <p>Note</p> <p>You can add reference data form SharePoint, OneDrive, Websearch etc and add extension capabilities to a declarative agent like plugins and connectors. You will learn how to add a plugin in the upcoming labs in this path. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#capabilities-of-a-declarative-agent","title":"Capabilities of a Declarative agent","text":"<p>You can enhance the agent's focus on context and data by not only adding instructions but also specifying the knowledge base it should access. They are called capabilities and there are three types of capabilities supported.</p> <ul> <li>Microsoft Graph Connectors - Pass connections of Graph connectors into the agent, allowing the agent to access and utilize the connector's knowledge.</li> <li>OneDrive and SharePoint - Provides URLs of files and sites to agent, for it to gain access to those contents.</li> <li>Web search - Enables or disables web content as part of the agent's knowledge base.</li> </ul> <p></p> <p>OnDrive and SharePoint</p> <p>URLs should be full path to SharePoint items (site, document library, folder, or file). You can use the \"Copy direct link\" option in SharePoint to get the full path or files and folders. To achieve this, right-click on the file or folder and select Details. Navigate to Path and click on the copy icon. Not specifying the URLs, the entire corpus of OneDrive and SharePoint content available to the logged in user will be used by the agent.</p> <p>Microsoft Graph Connector</p> <p>Not specifying the connections, the entire corpus of Graph Connectors content available to the logged in user will be used by the agent.</p> <p>Web search</p> <p>At the moment you cannot pass specific websites or domains and this acts only as a toggle on and off to use web. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-1-scaffold-a-declarative-agent-from-template","title":"Exercise 1: Scaffold a declarative agent from template","text":"<p>You can use just any editor to create a declarative agent if you know the structure of the files in the app package mentioned above. But things are easier if you use a tool like Teams Toolkit to not only create these files for you but also help you deploy and publish your app.  So to keep things as simple as possible you will use Teams Toolkit.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-install-teams-toolkit","title":"Step 1: Install Teams Toolkit","text":"<p>https://aka.ms/json-schemas/copilot/declarative-agent/v1.0/schema.json</p> <p>This step is temporary</p> <p>For now you will need to use this hotfix version until the feature is available in Teams Toolkit as either Preview or Stable Release</p> <ul> <li>Go to extensions tab of your Visual Studio Code and type team as in step 1\ufe0f\u20e3 in the image below.</li> <li>Select Teams Toolkit as step 2\ufe0f\u20e3. </li> <li>Select Switch to Pre-Release Version  3\ufe0f\u20e3 v5.9.2024091405 (pre-release)</li> </ul> <p></p> <p>Teams Toolkit Prerelease</p> <p>Only this lab uses prerelease version of Teams Toolkit. You can switch back to release version after this lab is completed. The steps are similar to above.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-use-teams-toolkit-to-create-a-declarative-agent-app","title":"Step 2: Use Teams Toolkit to create a declarative agent app","text":"<p>Go to the Teams Toolkit extension in your Visual Studio Code editor and select Create a New App</p> <p></p> <p>A panel opens up where you need to select Copilot Agent from the list of project types.</p> <p></p> <p>Next, you will be asked to choose the app feature of Copilot Agent. Choose <code>declarative agent</code> and select Enter. </p> <p></p> <p>Next, you will be asked to choose want to create a basic declarative agent or one with an API plugin.  Choose the No Plugin option.</p> <p></p> <p>Why not create one with API plugin here? </p> <p>You will build API plugins in the next lab and you will also learn how to integrate an API plugin with a declarative agent in the following one in this same path. Here we are just going to create a declarative agent. Baby steps!</p> <p>Next, type in the directory where the project folder has to be created.</p> <p></p> <p>Next, give it an application name <code>Geo Locator Game</code> and select Enter. </p> <p></p> <p>The project will be created in a few seconds in the folder you mentioned and will open up in a new project window of Visual Studio Code. This is your working folder.</p> <p></p> <p>Well done! You have successfully set up the base declarative Copilot app! Now, proceed to examine the files contained within to be able to customise it to make the geo locator game app. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-set-up-accounts-in-teams-toolkit","title":"Step 3: Set up accounts in Teams Toolkit","text":"<p>Now select the Teams Toolkit icon in the left 1\ufe0f\u20e3 . Under \"Accounts\" click \"Sign in to Microsoft 365\" 2\ufe0f\u20e3 and log in with your own Microsoft 365 account.</p> <p></p> <p>A browser window will pop up and offer to log into Microsoft 365. When it says \"You are signed in now and close this page\", please do so.</p> <p>Now verify that the \"Custom App Upload Enabled\" checker has a green checkmark. If it doesn't, that means that your user account doesn't have permission to upload Teams applications. Follow steps in Exercise 1 of this lab. </p> <p>Now verify that the \"Copilot Access Enabled\" checker has a green checkmark. If it doesn't, that means that your user account license for Copilot. This is required to continue the labs.</p> <p></p> <p>Now, let's do a code tour.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-4-understanding-the-files-in-the-app","title":"Step 4: Understanding the files in the app","text":"<p>Here's how the base project looks: </p> Folder/File Contents <code>.vscode</code> VSCode files for debugging <code>appPackage</code> Templates for the Teams application manifest, the GPT manifest, and the API specification <code>env</code> Environment files with a default  <code>.env.dev</code>    file <code>appPackage/color.png</code> Application logo image <code>appPackage/outline.png</code> Application logo outline image <code>appPackage/declarativeAgent.json</code> Defines settings and configurations of the declarative agent. <code>appPackage/instruction.txt</code> Defines the behaviour of declarative agent. <code>appPackage/manifest.json</code> Teams application manifest that defines metadata for your declarative agent. <code>teamsapp.yml</code> Main Teams Toolkit project file. The project file defines two primary things: Properties and configuration Stage definitions. <p>The file of interest for our lab is primarily the appPackage/instruction.txt file which is the core directives needed for your agent. It's a plain text file and you can write natural language instructions in it. </p> <p>Another important file is appPackage/declarativeAgent.json where there is a schema to be followed to extend Microsoft 365 Copilot with the new declarative agent. Let's look at what propertis the schema of this file has. </p> <ul> <li>The <code>$schema</code> is the schema reference </li> <li>The <code>version</code> is the schema version </li> <li>The <code>name</code> key represents the name of the declarative agent.</li> <li>The <code>description</code> provides a description.</li> <li>The <code>instructions</code> the path to the instructions.txt file which holds directives which will determine the operational behavior. You can also put your instructions as plain text as a value here. But for this lab we will use the instructions.txt file.</li> </ul> <p>Another important file is the <code>appPackage/manifest.json</code> file, which contains crucial metadata, including the package name, the developer\u2019s name, and references to the copilot extensions utilised by the application. The following section from the manifest.json file illustrates these details:</p> <pre><code>\"copilotExtensions\": {\n        \"declarativeCopilots\": [            \n            {\n                \"id\": \"declarativeAgent\",\n                \"file\": \"declarativeAgent.json\"\n            }\n        ]\n    },\n</code></pre> <p>You could also update the logo files <code>color.png</code> and <code>outline.png</code> to make it match your application's brand. In today's lab you will change color.png icon for the agent to stand out. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-2-update-instructions-and-icons","title":"Exercise 2: Update instructions and icons","text":""},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-update-icons-and-manifests","title":"Step 1: Update icons and manifests","text":"<p>First we will do the easy bit which is replacing the logo. Copy the image located here and replace it with the image of same name in the folder appPackage in your root project. </p> <p>Next, go to the file appPackage/manifest.json  in your root project and find the node copilotExtensions. Update the id value of the declarativeAgents array's first entry from <code>declarativeAgent</code> to <code>dcGeolocator</code> to make this ID unique.</p> <pre>\n \"copilotExtensions\": {\n        \"declarativeCopilots\": [            \n            {\n                \"id\": \"dcGeolocator\",\n                \"file\": \"declarativeAgent.json\"\n            }\n        ]\n    },\n\n</pre> <p>Next, go to the file appPackage/instruction.txt and copy paste the below instruction to overwrite the existing contents of the file.</p> <pre><code>System Role: You are the game host for a geo-location guessing game. Your goal is to provide the player with clues about a specific city and guide them through the game until they guess the correct answer. You will progressively offer more detailed clues if the player guesses incorrectly. You will also reference PDF files in special rounds to create a clever and immersive game experience.\n\nGame play Instructions:\nGame Introduction Prompt\nUse the following prompt to welcome the player and explain the rules:\nWelcome to the Geo Location Game! I\u2019ll give you clues about a city, and your task is to guess the name of the city. After each wrong guess, I\u2019ll give you a more detailed clue. The fewer clues you use, the more points you score! Let\u2019s get started. Here\u2019s your first clue:\nClue Progression Prompts\nStart with vague clues and become progressively specific if the player guesses incorrectly. Use the following structure:\nClue 1: Provide a general geographical clue about the city (e.g., continent, climate, latitude/longitude).\nClue 2: Offer a hint about the city\u2019s landmarks or natural features (e.g., a famous monument, a river).\nClue 3: Give a historical or cultural clue about the city (e.g., famous events, cultural significance).\nClue 4: Offer a specific clue related to the city\u2019s cuisine, local people, or industry.\nResponse Handling\nAfter the player\u2019s guess, respond accordingly:\n\nIf the player guesses correctly, say:\nThat\u2019s correct! You\u2019ve guessed the city in [number of clues] clues and earned [score] points. Would you like to play another round?\nIf the guess is wrong, say:\nThat\u2019s correct! You\u2019ve guessed the city in [number of clues] clues and earned [score] points. Would you like to play another round?\nPDF-Based Scenario\nFor special rounds, use a PDF file to provide clues from a historical document, traveler's diary, or ancient map:\nThis round is different! I\u2019ve got a secret document to help us. I\u2019ll read clues from this [historical map/traveler\u2019s diary] and guide you to guess the city. Here\u2019s the first clue:\nReference the specific PDF to extract details:\nTraveler's Diary PDF,Historical Map PDF.\nUse emojis where necessary to have friendly tone. \nScorekeeping System\nTrack how many clues the player uses and calculate points:\n\n1 clue: 10 points\n2 clues: 8 points\n3 clues: 5 points\n4 clues: 3 points\nEnd of Game Prompt\nAfter the player guesses the city or exhausts all clues, prompt:\nWould you like to play another round, try a special challenge?\n\n</code></pre> <p>Follow the next step to make sure our agent can help user engage with it by giving conversation starters.  </p> <p>Include your own files in appPackage files</p> <p>Notice this line in appPackage/declarative-copilot.json:</p> <p><code>\"instructions\": \"$[file('instruction.txt')]\",</code></p> <p>This brings in your instructions from the instruction.txt file. If you want to modularize your packaging files, you can use this technique in any of the JSON files in the appPackage folder.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-add-conversation-starters","title":"Step 2 : Add conversation starters","text":"<p>You can enhance user engagement with the declarative agent by adding conversation starters to it. </p> <p>Some of the benefits of having conversation starters are: </p> <ul> <li> <p>Engagement: They help initiate interaction, making users feel more comfortable and encouraging participation.</p> </li> <li> <p>Context Setting: Starters set the tone and topic of the conversation, guiding users on how to proceed.</p> </li> <li> <p>Efficiency: By leading with a clear focus, starters reduce ambiguity, allowing the conversation to progress smoothly.</p> </li> <li> <p>User Retention: Well-designed starters keep users interested, encouraging repeat interactions with the AI.</p> </li> </ul> <p>Open file <code>declarativeAgent.json</code> and right after the <code>instructions</code> node add a comma <code>,</code> and paste below code.</p> <pre><code> \"conversation_starters\": [\n      { \n            \"title\": \"Getting Started\",\n            \"text\":\"I am ready to play the Geo Location Game! Give me a city to guess, and start with the first clue.\"          \n\n         },\n        {\n            \"title\": \"Ready for a Challenge\",\n            \"text\": \"Let us try something different. Can we play a round using the travelers diary?\"\n        },\n        { \n            \"title\": \"Feeling More Adventurous\",\n            \"text\": \"I am in the mood for a challenge! Can we play the game using the historical map? I want to see if I can figure out the city from those ancient clues.\"\n        }\n    ]\n</code></pre> <p>Now all the changes are done to the agent, it's time to test it.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-test-the-app","title":"Step 3: Test the app","text":"<p>To test the app go to the <code>Teams Toolkit</code> extension in <code>Visual Studio Code</code>. This will open up the left pane. Under \"LIFECYCLE\" select \"Provision\".  You can see the value of Teams Toolkit here, as it makes publishing so simple. </p> <p></p> <p>In this step Teams toolkit will package up all the files inside the <code>appPackage</code> folder as a zip file and install the declarative agent to your own app catalog.</p> <p>Private Preview not enabled</p> <p>Provision step will fail if the user is using a Tenant without Private Preview enabled. </p> <p>Go to Teams in browser https://teams.microsoft.com/v2/ logged into your developer tenant. If you have a Microsoft 365 Copilot, the new app will be automatically pinned above your chats. Just open Teams, select \u201cchats\u201d and you\u2019ll see Copilot.</p> <p>Once the Copilot app is loaded, Find the \"Geo Locator Game\" from the right panel as shown. </p> <p></p> <p>If you can't find it, this may be a long list and you can find your agent by expanding the list by selecting \"see more\"</p> <p>Once launched, you will be in this focused chat window with the agent. And you will see the conversation starters as marked below:</p> <p></p> <p>Select one of the conversation starters and it will fill your compose message box with the starter prompt, just waiting for you to hit \"Enter\". It is still only your assistant and will wait for you to take action \ud83d\udfe2</p> <p>Check out the demo of the game. </p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-3-add-files-for-reference-bonus-exercise","title":"Exercise 3: Add files for reference (Bonus exercise)","text":"<p>Playing the same game over and over can get dull. To keep things fun and engaging, the game needs access to data that\u2019s regularly updated. Let\u2019s give the agent a new ability to refresh the game and ramp up the challenge. As we covered earlier, declarative agents can have three main capabilities, one of which is referencing SharePoint sites and OneDrive. So, let's go ahead and add the ability for your agent to access a couple of files.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-upload-files-to-sharepoint","title":"Step 1: Upload files to SharePoint.","text":"<p>Download this zip file consisting of two PDF file by selecting this link</p> <p>Extract the two files from the zip and upload to a SharePoint Teams site in the same tenant in the document library Documents. These documents are historical_map.pdf and travelers_diary to help make the game more challenging. </p> <p>Copy the absolute url of the site. For eg. <code>https://xyz.sharepoint.com/sites/contoso</code> and proceed to next step.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-update-declarative-agent-manifest","title":"Step 2: Update declarative agent manifest","text":"<p>Go to the environment file called .env.dev and create a new variable called \"SP_SITE_URL\" and paste the absolute url of the SharePoint site as its value.</p> <p>Next, go to the agent manifest appPackage/declarativeAgent.json and add a comma <code>,</code> after conversation_starters array and paste the belwo new array object for extending the agent's capability to refer to SharePoint data of a particular site.</p> <pre><code> \"capabilities\": [\n        {\n\n            \"name\": \"OneDriveAndSharePoint\",\n            \"items_by_url\": [\n            {\n                \"url\": \"${{SP_SITE_URL}}\"\n            }\n        ]\n        }\n    ]\n</code></pre> <p>This widens declarative agent's knowledge to read documents in this SharePoint site specifically to help spice up the game.  There is no limit to how many URLs you can add \ud83d\udcaa\ud83c\udffc</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-upgrade-app-manifest","title":"Step 3: Upgrade app manifest","text":"<p>Next, go to the file appPackage/manifest.json and upgrade the manifest version from \"1.0.0\"\" to \"1.0.1\" so the changes are reflected when you install. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-4-test-the-app","title":"Step 4: Test the app","text":"<ul> <li> <p>To test the app go back to the <code>Teams Toolkit</code> extension in <code>Visual Studio Code</code>. This will open up the left pane. Under \"LIFECYCLE\" select \"Provision\" for packaging and installing the upgraded declarative agent to your own app catalog.</p> </li> <li> <p>Go to Teams in browser https://teams.microsoft.com/v2/ logged into your developer tenant.</p> </li> <li> <p>Open the Copilot app and launch the \"Geo Locator Game\" again.</p> </li> </ul> <p></p> <p>This time, try the challenge which will be based on the travel diary. Choose the second converation starter.</p> <p></p> <p>You have basically become a declarative agent boss. Find out more from this video we did.</p> <p>[place holder for video]</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#resources","title":"Resources","text":"<ul> <li>Declarative agents</li> <li>Declarative agent manifest schema</li> <li>Supported content types</li> <li>Capabilities of Declarative agents</li> </ul> <p>Great job on building your game agent \ud83c\udf89 ! In the next lab, you\u2019ll create a REST API, use it to build a plugin, and dive into a real-world business scenario solved by another agent. Exciting stuff ahead. Select Next</p>"},{"location":"pages/internal/labFormat/","title":"Guide to formatting lab content","text":""},{"location":"pages/internal/labFormat/#formatting-text-elements","title":"Formatting text elements","text":"<p>These text elements are embedded into the lab instructions, so the formatting is always in-line</p> Element Treatment Example Function names monospaced with parenthesis Then, call <code>myFunction()</code> to do something ... Language keywords monospaced ... insert at the top of the <code>try</code> block ... Symbols in code (variable, object names etc.) monospaced ... the <code>foo</code> object contains something random ... File and folder names bold Copy the contents of foo.js into the bar folder Text on screen enclose in double quotes Now click on the \"foo\" button"},{"location":"pages/internal/labFormat/#includes","title":"Includes","text":"<p>To include content from the /docs/includes folder, use this format:</p>"},{"location":"pages/internal/labFormat/#hyperlinks","title":"Hyperlinks","text":"<p>Links within the labs can be relative and should open within the current window like this.</p> <p>Links that go outside the labs, including links to source code in the same repo, should open a new window like this</p> <p>Please add this query string to links to Microsoft documentation: ?WT.mc_id=m365-58890-cxa</p>"},{"location":"pages/internal/labFormat/#admonitions","title":"Admonitions","text":"<p>Challenge</p> <p>Here's something to try on your own</p> <p>Note</p> <p>Use this format to emphasize or clarify the instructions</p> <p>Tip</p> <p>Use this format to show tips and best practices</p> <p>Warning</p> <p>Use this format to warn the student about a common pitfall in completing the labs</p> <p>Danger</p> <p>Use this format to warn the student about security issues or stability issues that may arise in a production application</p> Video briefing <p> Caption </p> Video briefing <p> Caption </p> More information <p> Caption 1 Caption 2 Caption 3 </p> TL;DR <p>Use this format to provide ancillary details that may be of interest but are not essential</p>"}]}